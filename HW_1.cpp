#include <glad/glad.h>
#include <GLFW/glfw3.h>

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

#include <iostream>

using namespace std;

void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void processInput(GLFWwindow* window);

// settings
const unsigned int SCR_WIDTH = 1500;
const unsigned int SCR_HEIGHT = 800;
float rotateAngle = 0.0;
float translate_X = -0.7;
float translate_Y = -0.7;
float scale_X = 1.5;
float scale_Y = 1.5;

// Transformation modes
enum TransformationMode { NONE, ROTATE, TRANSLATE, SCALE };
TransformationMode activeMode = NONE;

// Time management
double lastKeyPressTime = 0.0;
const double keyPressDelay = 0.2; // delay in seconds

const char* vertexShaderSource = "#version 330 core\n"
"layout (location = 0) in vec3 aPos;\n"
"uniform mat4 transform;\n"
"void main()\n"
"{\n"
"   gl_Position = transform * vec4(aPos, 1.0);\n"
"}\0";
const char* fragmentShaderSource = "#version 330 core\n"
"out vec4 FragColor;\n"
"uniform vec4 color;\n"
"void main()\n"
"{\n"
"   FragColor = color;\n"
"}\n\0";

int main()
{
    // glfw: initialize and configure
    // ------------------------------
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

#ifdef __APPLE__
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
#endif

    // glfw window creation
    // --------------------
    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "CSE 4208: Assignment 1", NULL, NULL);
    if (window == NULL)
    {
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

    // glad: load all OpenGL function pointers
    // ---------------------------------------
    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
    {
        std::cout << "Failed to initialize GLAD" << std::endl;
        return -1;
    }


    // build and compile our shader program
    // ------------------------------------
    // vertex shader
    unsigned int vertexShader = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
    glCompileShader(vertexShader);
    // check for shader compile errors
    int success;
    char infoLog[512];
    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);
        std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
    }
    // fragment shader
    unsigned int fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
    glCompileShader(fragmentShader);
    // check for shader compile errors
    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(fragmentShader, 512, NULL, infoLog);
        std::cout << "ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n" << infoLog << std::endl;
    }
    // link shaders
    unsigned int shaderProgram = glCreateProgram();
    glAttachShader(shaderProgram, vertexShader);
    glAttachShader(shaderProgram, fragmentShader);
    glLinkProgram(shaderProgram);
    // check for linking errors
    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
    if (!success) {
        glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);
        std::cout << "ERROR::SHADER::PROGRAM::LINKING_FAILED\n" << infoLog << std::endl;
    }
    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);

    // set up vertex data (and buffer(s)) and configure vertex attributes
    // ------------------------------------------------------------------
    /*float vertices[] = {
    -0.5f, -0.5f, 0.0f, // left
     0.5f, -0.5f, 0.0f, // right
     0.0f,  0.5f, 0.0f  // top
     }*/
    //triangle
    float vertices[] = {
        0.105061870978386,0.717997030193037,0,
        0.154202276852004,0.707111037782543,0,
        0.156482428642138,0.797023593466424,0,
        0.296607820491668,0.776960897541659,0,
        0.325068470549414,0.881151625144365,0,
        0.401385909915855,0.86088764230325,0,
        0.401366111202771,0.851423857449265,0,
        0.777713248638838,0.745355551889127,0,
        0.778538195017323,0.639679920805147,0,
        0.755492492987955,0.6238343507672,0,
        0.755505692130011,0.630143540669856,0,
        0.756399934004289,0.557591156574822,0,
        0.877696749711268,0.537469064510806,0,
        0.877696749711268,0.537469064510806,0,
        0.878581092229005,0.46018478798878,0,
        0.908902821316614,0.453971291866028,0,
        0.909783864048836,0.375109717868338,0,
        0.88571852829566,0.371879227850189,0,
        0.892466589671671,0.097452565583237,0,
        0.857947533410328,0.0973436726612769,0,
        0.622524335918165,0.0650552714073584,0,
        0.623527470714403,0.0445537040092393,0,
        0.568084474509156,0.0428015179013363,0,
        0.428909420887642,0.0171258868173567,0,
        0.353575317604355,0.00742451740636851,0,
        0.322276852004619,0.0467579607325522,0,
        0.293047351922125,0.0750569213001154,0,
        0.152855964362316,0.0635736677115985,0,
        0.151895726777759,0.10458010229335,0,
        0.0995875268107573,0.101260518066325,0,
        0.103774954627949,0.602851014684045,0,
        0.153974591651542,0.598277511961722,0,
        0.159326843755155,0.656654017488863,0,
        0.258666886652367,0.641194522356046,0,
        0.257548259363141,0.106490678105922,0,
        0.153971291866028,0.0967002144860582,0,
        0.153070450420722,0.166098003629763,0,
        0.099716218445801,0.162775119617224,0,
        0.104820986635868,0.602854314469559,0,
        0.104012539184952,0.716416432931859,0,
        0.102428642138261,0.4593136446131,0,
        0.103309684870483,0.380452070615409,0,
        0.1019171753836,0.214832535885167,0,
        0.14899191552549,0.216558323708958,0,
        0.150377825441346,0.379023263487873,0,
        0.149496782709123,0.457884837485563,0,
        0.152921960072595,0.59511961722488,0,
        0.159326843755155,0.656654017488863,0,
        0.1579409338393,0.494189077709948,0,
        0.258340207886487,0.485042072265302,0,
        0.258165319254248,0.401445306055106,0,
        0.157756145850519,0.40586041907276,0,
        0.156300940438871,0.2102722323049,0,
        0.257769344992575,0.212169608975416,0,
        0.257551559148655,0.108067975581586,0,
        0.155014024088434,0.095126216795908,0,
        0.160372875763075,0.656657317274377,0,
        0.152925259858109,0.596696914700544,0,
        0.149496782709123,0.457884837485563,0,
        0.103471374360666,0.457739646922949,0,
        0.102263652862563,0.380448770829895,0,
        0.151427157234779,0.380603860749051,0,
        0.149493482923609,0.456307540009899,0,
        0.151430457020293,0.382181158224715,0,
        0.148988615739976,0.214981026233294,0,
        0.101913875598086,0.213255238409503,0,
        0.10076225045372,0.162778419402738,0,
        0.152027718198317,0.167672001319914,0,
        0.150034647747896,0.214984326018808,0,
        0.275990760600561,0.422006269592476,0,
        0.275004124731892,0.450394324368915,0,
        0.31276687015344,0.500986635868668,0,
        0.534482758620689,0.481181323213991,0,
        0.535466094703844,0.451215970961887,0,
        0.511384260023098,0.440098993565418,0,
        0.326266292690975,0.453710608810427,0,
        0.295862068965517,0.420491668041577,0,
        0.27703679260848,0.42200956937799,0,
        0.312697574657647,0.467863388879722,0,
        0.535466094703844,0.451215970961887,0,
        0.296611120277182,0.778538195017323,0,
        0.326114502557333,0.881154924929879,0,
        0.401382610130341,0.859310344827586,0,
        0.40166639168454,0.494957927734697,0,
        0.325322554033987,0.502603530770499,0,
        0.295994060386074,0.48358356706814,0,
        0.296607820491668,0.776960897541659,0,
        0.326111202771819,0.879577627454215,0,
        0.325325853819501,0.504180828246164,0,
        0.295858769180003,0.418914370565913,0,
        0.325220260683055,0.453707309024913,0,
        0.402610130341527,0.446065005774624,0,
        0.404005939613925,0.113261837980531,0,
        0.32450420722653,0.111433756805807,0,
        0.321369410988285,0.113001154924929,0,
        0.321319914205576,0.0893416927899685,0,
        0.29521201121927,0.109764065335753,0,
        0.295858769180003,0.418914370565913,0,
        0.325213661112027,0.450552714073585,0,
        0.324507507012044,0.113011054281471,0,
        0.401049331793433,0.700003299785513,0,
        0.401085629434086,0.717353572017818,0,
        0.401362811417257,0.849846559973601,0,
        0.777709948853324,0.743778254413463,0,
        0.779584227025243,0.639683220590661,0,
        0.756535225210361,0.62226035307705,0,
        0.756551724137931,0.63014684045537,0,
        0.402095363801352,0.700006599571027,0,
        0.40213496122752,0.718934169278996,0,
        0.779580927239729,0.638105923114997,0,
        0.503309684870483,0.580452070615409,0,
        0.560950338228015,0.632684375515591,0,
        0.619508331958422,0.623405378650387,0,
        0.619472034317769,0.606055106418082,0,
        0.560910740801847,0.613756805807622,0,
        0.504322719023263,0.564682395644283,0,
        0.504355716878402,0.580455370400923,0,
        0.560947038442501,0.631107078039927,0,
        0.560907441016333,0.612179508331958,0,
        0.504322719023263,0.564682395644283,0,
        0.504154429962052,0.484240224385414,0,
        0.534482758620689,0.481181323213991,0,
        0.53546279491833,0.449638673486223,0,
        0.512430292031018,0.440102293350932,0,
        0.512826266292691,0.129377990430621,0,
        0.552542484738492,0.11373040752351,0,
        0.55249958752681,0.0932255403398777,0,
        0.559821811582247,0.0932486388384753,0,
        0.560818346807457,0.0695924764890282,0,
        0.568133971291866,0.0664609800362975,0,
        0.568091074080184,0.0459561128526645,0,
        0.623530770499917,0.0461310014849034,0,
        0.622524335918165,0.0650552714073584,0,
        0.617376670516416,0.60447120937139,0,
        0.564045537040092,0.6121894076885,0,
        0.569140405873618,0.0475367101138425,0,
        0.617125886817356,0.48459660122092,0,
        0.915182313149645,0.455568388054776,0,
        0.915149315294505,0.439795413298135,0,
        0.618129021613595,0.464095033822801,0,
        0.620062695924764,0.388391354561953,0,
        0.90978716383435,0.376687015344002,0,
        0.908869823461475,0.438198317109387,0,
        0.910829896056756,0.375113017653852,0,
        0.88571852829566,0.371879227850189,0,
        0.622144860584062,0.383666061705988,0,
        0.620062695924764,0.388391354561953,0,
        0.88571852829566,0.371879227850189,0,
        0.892466589671671,0.097452565583237,0,
        0.858993565418247,0.0973469724467909,0,
        0.850156739811912,0.373344332618379,0,
        0.885715228510147,0.370301930374525,0,
        0.403606665566738,0.422408843425177,0,
        0.512380795248308,0.41644283121597,0,
        0.513473024253423,0.438528295660782,0,
        0.402606830556013,0.44448770829896,0,
        0.404048836825606,0.133766705164164,0,
        0.51181323213991,0.145147665401748,0,
        0.511328163669361,0.413284936479128,0,
        0.445441346312489,0.419386239894406,0,
        0.445900016498927,0.138630589011714,0,
        0.474152780069295,0.143451575647582,0,
        0.471585546939449,0.416314139580927,0,
        0.451400758950668,0.267985480943738,0,
        0.455578287411318,0.264844085134466,0,
        0.456498927569708,0.204910080844745,0,
        0.45231479953803,0.204896881702689,0,
        0.45139415937964,0.26483088599241,0,
        0.461864378815377,0.269595776274542,0,
        0.466045207061541,0.268031677940933,0,
        0.465916515426497,0.206517076390034,0,
        0.462775119617224,0.204929879557828,0,
        0.461857779244349,0.266441181323213,0,
        0.324497607655502,0.108279161854479,0,
        0.351644943078699,0.0847054941428806,0,
        0.430113842600231,0.0928394654347465,0,
        0.421762085464444,0.100699554528955,0,
        0.552539184952978,0.112153110047846,0,
        0.513868998515096,0.127803992740471,0,
        0.404012539184953,0.116416432931859,0,
        0.324497607655502,0.108279161854479,0,
        0.42175878567893,0.0991222570532914,0,
        0.552542484738492,0.11373040752351,0,
        0.55249958752681,0.0932255403398777,0,
        0.431133476324039,0.0802243854149478,0,
        0.431123576967497,0.0754924929879556,0,
        0.560867843590166,0.0932519386239892,0,
        0.560818346807457,0.0695924764890282,0,
        0.430028048176868,0.0518297310674804,0,
        0.431060881042732,0.0455238409503381,0,
        0.568130671506352,0.0648836825606334,0,
        0.56913380630259,0.0443821151625143,0,
        0.432060716053456,0.0234449760765548,0,
        0.432106913050651,0.045527140735852,0,
        0.351641643293186,0.0831281966672166,0,
        0.35253258538195,0.00899851509651861,0,
        0.429952153110047,0.0155518891272066,0,
        0.429067810592311,0.0928361656492325,0,
        0.615225210361326,0.576073255238409,0,
        0.756399934004289,0.557591156574822,0,
        0.877693449925754,0.535891767035142,0,
        0.879627124236924,0.460188087774294,0,
        0.617125886817356,0.48459660122092,0,
        0.615225210361326,0.576073255238409,0,
        0.180221085629434,0.644101633393829,0,
        0.255512291701039,0.633298135621184,0,
        0.25521201121927,0.489764065335753,0,
        0.179917505362151,0.498990265632733,0,
        0.180221085629434,0.644101633393829,0,
        0.214730242534235,0.639478633888797,0,
        0.214545454545454,0.551149975251608,0,
        0.180032997855139,0.554195677280976,0,
        0.18021778584392,0.642524335918165,0,
        0.224141230819996,0.637931034482758,0,
        0.223956442831215,0.549602375845569,0,
        0.255330803497772,0.546546774459659,0,
        0.255512291701039,0.633298135621184,0,
        0.225183963042402,0.636357036792608,0,
        0.256558323708959,0.633301435406698,0,
        0.256343837650552,0.530777099488533,0,
        0.254165979211351,0.489760765550239,0,
        0.223837650552714,0.492819666721663,0,
        0.22392674476159,0.535406698564593,0,
        0.256340537865038,0.529199802012869,0,
        0.254165979211351,0.489760765550239,0,
        0.214429962052466,0.495944563603365,0,
        0.179917505362151,0.498990265632733,0,
        0.18,0.538422702524335,0,
        0.214512456690315,0.535377000494967,0,
        0.214426662266952,0.494367266127701,0,
        0.402039267447616,0.673192542484738,0,
        0.50032667876588,0.654575152615079,0,
        0.502092064015839,0.498429302095363,0,
        0.401692789968652,0.507576307540009,0,
        0.402035967662102,0.671615245009074,0,
        0.402019468734532,0.663728757630753,0,
        0.496126051806632,0.646675466094703,0,
        0.496871803332783,0.503144695594786,0,
        0.402752021118627,0.51388879722818,0,
        0.401824781389209,0.570668206566573,0,
        0.443652862563933,0.564491008084474,0,
        0.443840950338228,0.654396964197327,0,
        0.403065500742451,0.663732057416267,0,
        0.40179178353407,0.554895231809932,0,
        0.443619864708793,0.548718033327833,0,
        0.44458010229335,0.507711598746081,0,
        0.402752021118627,0.51388879722818,0,
        0.452205906616069,0.652846065005774,0,
        0.496122752021118,0.645098168619039,0,
        0.496983996040257,0.556772809767365,0,
        0.452017818841775,0.562940108892921,0,
        0.452205906616069,0.652846065005774,0,
        0.451988120772149,0.548744431611945,0,
        0.496957597756145,0.544154429962052,0,
        0.496871803332783,0.503144695594786,0,
        0.452948358356706,0.507737997030193,0,
        0.453034152780069,0.548747731397459,0,
        0.601729087609305,0.624926579772314,0,
        0.601748886322389,0.634390364626299,0,
        0.721996370235934,0.612687675301105,0,
        0.723982841115327,0.562220755650882,0,
        0.682151460155089,0.566820656657317,0,
        0.680168289061211,0.618864873783204,0,
        0.639376340537865,0.620313479623824,0,
        0.640320079194852,0.571420557663751,0,
        0.178653687510311,0.39488533245339,0,
        0.25501072430292,0.393548919320243,0,
        0.253601715888467,0.220042897211681,0,
        0.178280811747236,0.216650717703349,0,
        0.178653687510311,0.39488533245339,0,
        0.213172743771654,0.39499422537535,0,
        0.213083649562778,0.35240719353242,0,
        0.178564593301435,0.35229830061046,0,
        0.178534895231809,0.338102623329483,0,
        0.213053951493152,0.338211516251443,0,
        0.212796568223065,0.215182313149645,0,
        0.222217455865368,0.218366606170598,0,
        0.223514271572347,0.338244514106582,0,
        0.253849199802012,0.338340207886487,0,
        0.253875598086124,0.350958587691799,0,
        0.222497937634053,0.352436891602045,0,
        0.223633063850849,0.395027223230489,0,
        0.123629764065335,0.593449925754825,0,
        0.149770664906781,0.588800527965682,0,
        0.148467249628774,0.465768025078369,0,
        0.121273717208381,0.467259528130671,0,
        0.124672496287741,0.591875928064675,0,
        0.122422042567233,0.516159049661771,0,
        0.121346312489688,0.501960072595281,0,
        0.147490513116647,0.498887972281801,0,
        0.147516911400758,0.511506352087114,0,
        0.123468074575152,0.516162349447285,0,
        0.120032997855139,0.374195677280976,0,
        0.146183798053126,0.374278171918825,0,
        0.144820986635868,0.222854314469559,0,
        0.119716218445801,0.222775119617224,0,
        0.120032997855139,0.374195677280976,0,
        0.119957102788318,0.337917835340702,0,
        0.146104603200791,0.336423032502887,0,
        0.14503217290876,0.32380135291206,0,
        0.119927404718693,0.323722158059726,0,

        //color
        //extension of pillar 1
        0.275990760600561, 0.422006269592476, 0,//70
        0.275004124731892, 0.450394324368915, 0,//71
        0.31276687015344, 0.500986635868668, 0,//72
        0.312697574657647, 0.467863388879722, 0,//79

        0.312697574657647, 0.467863388879722, 0,//79
        0.31276687015344, 0.500986635868668, 0,//72
        0.534482758620689, 0.481181323213991, 0,//73
        0.535466094703844, 0.451215970961887, 0, //74

        0.295862068965517, 0.420491668041577, 0,//77
        0.27703679260848, 0.42200956937799, 0,//78
        0.312697574657647, 0.467863388879722, 0,//79
        0.326266292690975, 0.453710608810427, 0,//76

        0.326266292690975, 0.453710608810427, 0,//76
        0.312697574657647, 0.467863388879722, 0,//79
        0.535466094703844, 0.451215970961887, 0, //74
        0.511384260023098, 0.440098993565418, 0,//75
        //pillar 1
        0.296611120277182, 0.778538195017323, 0,//81
        0.326114502557333, 0.881154924929879, 0,//82
        0.325322554033987, 0.502603530770499, 0,//85
        0.295994060386074, 0.48358356706814, 0,//86

        0.326114502557333, 0.881154924929879, 0,//82
        0.401382610130341, 0.859310344827586, 0,//83
        0.40166639168454, 0.494957927734697, 0,//84
        0.325322554033987, 0.502603530770499, 0,//85

        0.295858769180003, 0.418914370565913, 0,//90
        0.325220260683055, 0.453707309024913, 0,//91
        0.32450420722653, 0.111433756805807, 0,//94
        0.321369410988285, 0.113001154924929, 0,//95
        0.321319914205576, 0.0893416927899685, 0,//96
        0.29521201121927, 0.109764065335753, 0,//97

        0.325220260683055, 0.453707309024913, 0,//91
        0.402610130341527, 0.446065005774624, 0,//92
        0.404005939613925, 0.113261837980531, 0,//93
        0.32450420722653, 0.111433756805807, 0,//94
        //railling
        0.401049331793433, 0.700003299785513, 0,//101
        0.401085629434086, 0.717353572017818, 0,//102
        0.779584227025243, 0.639683220590661, 0,//105
        0.756535225210361, 0.62226035307705, 0,//106
        0.756551724137931, 0.63014684045537, 0,//107

        0.401085629434086, 0.717353572017818, 0,//102
        0.401362811417257, 0.849846559973601, 0,//103
        0.777709948853324, 0.743778254413463, 0,//104
        0.779584227025243, 0.639683220590661, 0,//105
        //pillar 2
        0.503309684870483, 0.580452070615409, 0,//111
        0.560950338228015, 0.632684375515591, 0,//112
        0.560910740801847, 0.613756805807622, 0,//115
        0.504322719023263, 0.564682395644283, 0,//116

        0.560950338228015, 0.632684375515591, 0,//112
        0.619508331958422, 0.623405378650387, 0,//113
        0.619472034317769, 0.606055106418082, 0,//114
        0.560910740801847, 0.613756805807622, 0,//115

        0.504154429962052, 0.484240224385414, 0,//121
        0.504322719023263, 0.564682395644283, 0,//120
        0.564045537040092, 0.6121894076885, 0,//135
        0.534482758620689, 0.481181323213991, 0,//122

        0.534482758620689, 0.481181323213991, 0,//122
        0.564045537040092, 0.6121894076885, 0,//135
        0.552542484738492, 0.11373040752351, 0,//126
        0.53546279491833, 0.449638673486223, 0,//123

        0.512826266292691, 0.129377990430621, 0,//125
        0.512430292031018, 0.440102293350932, 0,//124
        0.53546279491833, 0.449638673486223, 0,//123
        0.552542484738492, 0.11373040752351, 0,//126

        0.552542484738492, 0.11373040752351, 0,//126
        0.564045537040092, 0.6121894076885, 0,//135
        0.559821811582247, 0.0932486388384753, 0,//128
        0.55249958752681, 0.0932255403398777, 0,//127

        0.559821811582247, 0.0932486388384753, 0,//128
        0.564045537040092, 0.6121894076885, 0,//135
        0.568133971291866, 0.0664609800362975, 0,//130
        0.560818346807457, 0.0695924764890282, 0,//129

        0.564045537040092, 0.6121894076885, 0,//135
        0.617376670516416, 0.60447120937139, 0,//134
        0.622524335918165, 0.0650552714073584, 0,//133
        0.568133971291866, 0.0664609800362975, 0,//130

        0.568133971291866, 0.0664609800362975, 0,//130
        0.622524335918165, 0.0650552714073584, 0,//133
        0.623527470714403, 0.0445537040092393, 0,//22
        0.568084474509156, 0.0428015179013363, 0,//23
        //garage top part
        0.618129021613595, 0.464095033822801, 0,//140
        0.617125886817356, 0.48459660122092, 0,//137
        0.915182313149645, 0.455568388054776, 0,//138
        0.915149315294505, 0.439795413298135, 0,//139

        0.620062695924764, 0.388391354561953, 0,//141
        0.618129021613595, 0.464095033822801, 0,//140
        0.908869823461475, 0.438198317109387, 0,//143
        0.90978716383435, 0.376687015344002, 0,//142

        0.88571852829566, 0.371879227850189, 0,//145
        0.90978716383435, 0.376687015344002, 0,//142
        0.620062695924764, 0.388391354561953, 0,//141
        0.622144860584062, 0.383666061705988, 0,//146
        //garage side part
        0.88571852829566, 0.371879227850189, 0,//148
        0.892466589671671, 0.097452565583237, 0,//149
        0.858993565418247, 0.0973469724467909, 0,//150
        0.850156739811912, 0.373344332618379, 0,//151
        //door top
        0.403606665566738, 0.422408843425177, 0,//153
        0.512380795248308, 0.41644283121597, 0,//154
        0.513473024253423, 0.438528295660782, 0,//155
        0.402606830556013, 0.44448770829896, 0,//156
        //door
        0.403606665566738, 0.422408843425177, 0,//153
        0.445441346312489, 0.419386239894406, 0,//160
        0.445900016498927, 0.138630589011714, 0,//161
        0.404048836825606, 0.133766705164164, 0,//157

        0.471585546939449, 0.416314139580927, 0,//163
        0.474152780069295, 0.143451575647582, 0,//162
        0.51181323213991, 0.145147665401748, 0,//158
        0.512380795248308, 0.41644283121597, 0,//154

        0.474152780069295, 0.143451575647582, 0,//162
        0.445900016498927, 0.138630589011714, 0,//161
        0.445441346312489, 0.419386239894406, 0,//160
        0.471585546939449, 0.416314139580927, 0,//163
        //door handle
        0.451400758950668, 0.267985480943738, 0,//164
        0.455578287411318, 0.264844085134466, 0,//165
        0.456498927569708, 0.204910080844745, 0,//166
        0.45231479953803, 0.204896881702689, 0,//167

        0.461864378815377, 0.269595776274542, 0,//169
        0.466045207061541, 0.268031677940933, 0,//170
        0.465916515426497, 0.206517076390034, 0,//171
        0.462775119617224, 0.204929879557828, 0,//172
        //infront of door
        0.421762085464444, 0.100699554528955, 0,//177
        0.430113842600231, 0.0928394654347465, 0,//176
        0.351644943078699, 0.0847054941428806, 0,//175
        0.324497607655502, 0.108279161854479, 0,//181
        0.404012539184953, 0.116416432931859, 0,//180
        0.513868998515096, 0.127803992740471, 0,//179
        0.552539184952978, 0.112153110047846, 0,//178
        //door bottom part
        0.404012539184953, 0.116416432931859, 0,//180
        0.404048836825606, 0.133766705164164, 0,//157
        0.51181323213991, 0.145147665401748, 0,//158
        0.513868998515096, 0.127803992740471, 0,//179
        //stair
        0.42175878567893, 0.0991222570532914, 0,//182
        0.552542484738492, 0.11373040752351, 0,//183
        0.55249958752681, 0.0932255403398777, 0,//184
        0.431133476324039, 0.0802243854149478, 0,//185

        0.55249958752681, 0.0932255403398777, 0,//184
        0.431133476324039, 0.0802243854149478, 0,//185
        0.431123576967497, 0.0754924929879556, 0,//186
        0.560867843590166, 0.0932519386239892, 0,//187

        0.431123576967497, 0.0754924929879556, 0,//186
        0.560867843590166, 0.0932519386239892, 0,//187
        0.560818346807457, 0.0695924764890282, 0,//188
        0.430028048176868, 0.0518297310674804, 0,//189

        0.560818346807457, 0.0695924764890282, 0,//188
        0.430028048176868, 0.0518297310674804, 0,//189
        0.431060881042732, 0.0455238409503381, 0,//190
        0.568130671506352, 0.0648836825606334, 0,//191

        0.431060881042732, 0.0455238409503381, 0,//190
        0.568130671506352, 0.0648836825606334, 0,//191
        0.568084474509156, 0.0428015179013363, 0,//23
        0.428909420887642, 0.0171258868173567, 0,//24
        //stair side
        0.351641643293186, 0.0831281966672166, 0,//195
        0.35253258538195, 0.00899851509651861, 0,//196
        0.429952153110047, 0.0155518891272066, 0,//197
        0.429067810592311, 0.0928361656492325, 0,//198
        //balcony
        0.756399934004289, 0.557591156574822, 0,//200
        0.877693449925754, 0.535891767035142, 0,//201
        0.879627124236924, 0.460188087774294, 0,//202
        0.617125886817356, 0.48459660122092, 0,//203
        0.615225210361326, 0.576073255238409, 0,//204
        //window 1
        0.180221085629434, 0.644101633393829, 0,//205
        0.255512291701039, 0.633298135621184, 0,//206
        0.25521201121927, 0.489764065335753, 0,//207
        0.179917505362151, 0.498990265632733, 0,//208

        0.214730242534235, 0.639478633888797, 0,//210
        0.224141230819996, 0.637931034482758, 0,//2014
        0.223837650552714, 0.492819666721663, 0,//222
        0.214429962052466, 0.495944563603365, 0,//226

        0.180032997855139, 0.554195677280976, 0,//212
        0.255330803497772, 0.546546774459659, 0,//216
        0.256340537865038, 0.529199802012869, 0,//224
        0.18, 0.538422702524335, 0,//228
        //window 2
        0.402039267447616, 0.673192542484738, 0,//231
        0.50032667876588, 0.654575152615079, 0,//232
        0.502092064015839, 0.498429302095363, 0,//233
        0.401692789968652, 0.507576307540009, 0,//234

        0.402019468734532, 0.663728757630753, 0,//236
        0.496126051806632, 0.646675466094703, 0,//237
        0.496871803332783, 0.503144695594786, 0,//238
        0.402752021118627, 0.51388879722818, 0,//239

        0.401824781389209, 0.570668206566573, 0,//240
        0.40179178353407, 0.554895231809932, 0,//244
        0.496957597756145, 0.544154429962052, 0,//254
        0.496983996040257, 0.556772809767365, 0,//250

        0.443840950338228, 0.654396964197327, 0,//242
        0.44458010229335, 0.507711598746081, 0,//246
        0.452948358356706, 0.507737997030193, 0,//256
        0.452205906616069, 0.652846065005774, 0,//248
        //door 2
        0.619508331958422, 0.623405378650387, 0,//113
        0.601729087609305, 0.624926579772314, 0,//258
        0.601748886322389, 0.634390364626299, 0,//259
        0.680168289061211, 0.618864873783204, 0,//263
        0.639376340537865, 0.620313479623824, 0,//264
        0.640320079194852, 0.571420557663751, 0,//265
        0.615225210361326, 0.576073255238409, 0,//204

        0.640320079194852, 0.571420557663751, 0,//265
        0.639376340537865, 0.620313479623824, 0,//264
        0.680168289061211, 0.618864873783204, 0,//263
        0.682151460155089, 0.566820656657317, 0,//262

        0.680168289061211, 0.618864873783204, 0,//263
        0.721996370235934, 0.612687675301105, 0,//260
        0.723982841115327, 0.562220755650882, 0,//261
        0.682151460155089, 0.566820656657317, 0,//262

        //window place 1
        0.1579409338393, 0.494189077709948, 0,//49
        0.159326843755155, 0.656654017488863, 0,//33
        0.258666886652367, 0.641194522356046, 0,//34
        0.258340207886487, 0.485042072265302, 0,//50

        0.156300940438871, 0.2102722323049, 0,//53
        0.157756145850519, 0.40586041907276, 0,//52
        0.258165319254248, 0.401445306055106, 0,//51
        0.257769344992575, 0.212169608975416, 0,//54

        0.157756145850519, 0.40586041907276, 0,//52
        0.1579409338393, 0.494189077709948, 0,//49
        0.258340207886487, 0.485042072265302, 0,//50
        0.258165319254248, 0.401445306055106, 0,//51

        0.151895726777759, 0.10458010229335, 0,//29
        0.156300940438871, 0.2102722323049, 0,//53
        0.257769344992575, 0.212169608975416, 0,//54
        0.257548259363141, 0.106490678105922, 0,//35

        
        //3rd section
        0.153974591651542, 0.598277511961722, 0,//32
        0.103774954627949, 0.602851014684045, 0,//31
        0.105061870978386, 0.717997030193037, 0,//1
        0.154202276852004, 0.707111037782543, 0,//2

        0.159326843755155, 0.656654017488863, 0,//33
        0.153974591651542, 0.598277511961722, 0,//32
        0.154202276852004, 0.707111037782543, 0,//2
        0.156482428642138, 0.797023593466424, 0,//3

        0.157756145850519, 0.40586041907276, 0,//52
        0.156300940438871, 0.2102722323049, 0,//53
        0.151895726777759, 0.10458010229335, 0,//29
        0.153070450420722, 0.166098003629763, 0,//37
        0.14899191552549, 0.216558323708958, 0,//44
        0.150377825441346, 0.379023263487873, 0,//45
        0.149496782709123, 0.457884837485563, 0,//46
        0.153974591651542, 0.598277511961722, 0,//32
        0.159326843755155, 0.656654017488863, 0,//33
        0.1579409338393, 0.494189077709948, 0,//49

        //2nd section
        0.293047351922125, 0.0750569213001154, 0,//27
        0.152855964362316, 0.0635736677115985, 0,//28
        0.151895726777759, 0.10458010229335, 0,//29
        0.257548259363141, 0.106490678105922, 0,//35
        0.257769344992575, 0.212169608975416, 0,//54
        0.258165319254248, 0.401445306055106, 0,//51
        0.258340207886487, 0.485042072265302, 0,//50
        0.258666886652367, 0.641194522356046, 0,//34
        0.296607820491668, 0.776960897541659, 0,//4

        0.258666886652367, 0.641194522356046, 0,//34
        0.159326843755155, 0.656654017488863, 0,//33
        0.156482428642138, 0.797023593466424, 0,//3
        0.296607820491668, 0.776960897541659, 0,//4
        //3rd section more
        0.151895726777759, 0.10458010229335, 0,
        0.0995875268107573, 0.101260518066325, 0,
        0.099716218445801, 0.162775119617224, 0,
        0.153070450420722, 0.166098003629763, 0,
        //window place 2
        0.149496782709123, 0.457884837485563, 0,//46
        0.102428642138261, 0.4593136446131, 0,//41
        0.103774954627949, 0.602851014684045, 0,//31
        0.153974591651542, 0.598277511961722, 0,//32

        0.14899191552549, 0.216558323708958, 0,//44
        0.1019171753836, 0.214832535885167, 0,//43
        0.103309684870483, 0.380452070615409, 0,//42
        0.150377825441346, 0.379023263487873, 0,//45

        0.150377825441346, 0.379023263487873, 0,//45
        0.103309684870483, 0.380452070615409, 0,//42
        0.102428642138261, 0.4593136446131, 0,//41
        0.149496782709123, 0.457884837485563, 0,//46

        0.153070450420722, 0.166098003629763, 0,//37
        0.099716218445801, 0.162775119617224, 0,//38
        0.1019171753836, 0.214832535885167, 0,//43
        0.14899191552549, 0.216558323708958, 0,//44
        //window 3
        0.178653687510311, 0.39488533245339, 0,//266
        0.25501072430292, 0.393548919320243, 0,//267
        0.253601715888467, 0.220042897211681, 0,//268
        0.178280811747236, 0.216650717703349, 0,//269

        0.213172743771654, 0.39499422537535, 0,//271
        0.212796568223065, 0.215182313149645, 0,//276
        0.222217455865368, 0.218366606170598, 0,//277
        0.223633063850849, 0.395027223230489, 0,//282

        0.178564593301435, 0.35229830061046, 0,//273
        0.253875598086124, 0.350958587691799, 0,//280
        0.253849199802012, 0.338340207886487, 0,//279
        0.178534895231809, 0.338102623329483, 0,//274

        //small window 1
        0.123629764065335, 0.593449925754825, 0,//283
        0.149770664906781, 0.588800527965682, 0,//284
        0.148467249628774, 0.465768025078369, 0,//285
        0.121273717208381, 0.467259528130671, 0,//286

        0.122422042567233, 0.516159049661771, 0,//288
        0.121346312489688, 0.501960072595281, 0,//289
        0.147490513116647, 0.498887972281801, 0,//290
        0.147516911400758, 0.511506352087114, 0,//291
        //small window 2
        0.120032997855139, 0.374195677280976, 0,//293
        0.146183798053126, 0.374278171918825, 0,//294
        0.144820986635868, 0.222854314469559, 0,//295
        0.119716218445801, 0.222775119617224, 0,//296

        0.119957102788318, 0.337917835340702, 0,//298
        0.146104603200791, 0.336423032502887, 0,//299
        0.14503217290876, 0.32380135291206, 0,//300
        0.119927404718693, 0.323722158059726, 0,//301

        //stair side
        0.353575317604355, 0.00742451740636851, 0,//25
        0.322276852004619, 0.0467579607325522, 0,//26
        0.293047351922125, 0.0750569213001154, 0,//27
        0.29521201121927, 0.109764065335753, 0,//97
        0.321319914205576, 0.0893416927899685, 0,//96
        0.321369410988285, 0.113001154924929, 0,//95
        0.32450420722653, 0.111433756805807, 0,//94
        0.351644943078699, 0.0847054941428806, 0,//175

        //1st section
        0.504154429962052, 0.484240224385414, 0,//121
        0.40166639168454, 0.494957927734697, 0,//84
        0.402095363801352, 0.700006599571027, 0,//108
        0.756551724137931, 0.63014684045537, 0,//107
        0.756399934004289, 0.557591156574822, 0,//12

        //garage door
        0.622524335918165, 0.0650552714073584, 0,//21
        0.622144860584062, 0.383666061705988, 0,//146
        0.850156739811912, 0.373344332618379, 0,//151
        0.858993565418247, 0.0973469724467909, 0//150
    };

    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);


    // uncomment this call to draw in wireframe polygons.
    //glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);

    // render loop
    // -----------
    while (!glfwWindowShouldClose(window))
    {
        // input
        // -----
        processInput(window);

        // render
        // ------
        glClearColor(0.314f, 0.478f, 0.38f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT);

        // create transformations
        /*glm::mat4 trans = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
        trans = glm::translate(trans, glm::vec3(translate_X, translate_Y, 0.0f));
        trans = glm::rotate(trans, glm:: radians(rotateAngle), glm::vec3(0.0f, 0.0f, 1.0f));
        trans = glm::scale(trans,glm::vec3(scale_X, scale_Y, 1.0));*/
        glm::mat4 translationMatrix;
        glm::mat4 rotationMatrix;
        glm::mat4 scaleMatrix;
        glm::mat4 modelMatrix;
        glm::mat4 identityMatrix = glm::mat4(1.0f);
        translationMatrix = glm::translate(identityMatrix, glm::vec3(translate_X, translate_Y, 0.0f));
        rotationMatrix = glm::rotate(identityMatrix, glm::radians(rotateAngle), glm::vec3(0.0f, 0.0f, 1.0f));
        scaleMatrix = glm::scale(identityMatrix, glm::vec3(scale_X, scale_Y, 1.0f));
        modelMatrix = translationMatrix * rotationMatrix * scaleMatrix;
        //modelMatrix = rotationMatrix * scaleMatrix;

        // get matrix's uniform location and set matrix
        glUseProgram(shaderProgram);
        unsigned int transformLoc = glGetUniformLocation(shaderProgram, "transform");
        glUniformMatrix4fv(transformLoc, 1, GL_FALSE, glm::value_ptr(modelMatrix));

        int colorPlace = glGetUniformLocation(shaderProgram, "color");

        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.0, 0.0, 0.0, 1.0)));

        // draw our first triangle
        glBindVertexArray(VAO); // seeing as we only have a single VAO there's no need to bind it every time, but we'll do so to keep things a bit more organized
        //glDrawArrays(GL_LINES, 0, 301);
        glDrawArrays(GL_LINE_STRIP, 0, 69);//outline
        glDrawArrays(GL_LINE_STRIP, 69, 11);//extension of pillar 1
        glDrawArrays(GL_LINE_STRIP, 80, 9);//pillar 1 upper
        glDrawArrays(GL_LINE_STRIP, 89, 11);//pillar 1 lower
        glDrawArrays(GL_LINE_STRIP, 100, 10);//railling
        glDrawArrays(GL_LINE_STRIP, 110, 26);//pillar 2
        glDrawArrays(GL_LINE_STRIP, 136, 12);//garage top part
        glDrawArrays(GL_LINE_STRIP, 148, 4);//garage side part
        glDrawArrays(GL_LINE_STRIP, 152, 11);//door
        glDrawArrays(GL_LINE_STRIP, 163, 5);//dooe handle 1
        glDrawArrays(GL_LINE_STRIP, 168, 5);//door handle 2
        glDrawArrays(GL_LINE_STRIP, 173, 8);//infront of door
        glDrawArrays(GL_LINE_STRIP, 181, 13);//stair
        glDrawArrays(GL_LINE_STRIP, 194, 4);//stair side
        glDrawArrays(GL_LINE_STRIP, 198, 6);//balcony
        glDrawArrays(GL_LINE_STRIP, 204, 26);//window 1
        glDrawArrays(GL_LINE_STRIP, 230, 17);//window 2
        glDrawArrays(GL_LINE_STRIP, 247, 5);//window 2
        glDrawArrays(GL_LINE_STRIP, 252, 5);//window 2
        glDrawArrays(GL_LINE_STRIP, 257, 8);//door 2
        glDrawArrays(GL_LINE_STRIP, 265, 17);//window 3
        glDrawArrays(GL_LINE_STRIP, 282, 10);//small window 1
        glDrawArrays(GL_LINE_STRIP, 292, 9);//small window 2

        //color
        //1st section
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.961, 0.961, 0.961, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 606, 5);
        //2nd section
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.902, 0.902, 0.902, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 537, 9);
        glDrawArrays(GL_TRIANGLE_FAN, 546, 4);
        //extension of pillar 1
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.478, 0.478, 0.478, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 301, 4);
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.569, 0.569, 0.569, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 305, 4);
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.278, 0.278, 0.278, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 309, 4);
        glDrawArrays(GL_TRIANGLE_FAN, 313, 4);
        //pillar 1
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.82, 0.82, 0.82, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 317, 4);
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.902, 0.902, 0.902, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 321, 4);

        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.82, 0.82, 0.82, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 325, 6);
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.902, 0.902, 0.902, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 331, 4);
        //railling
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.859, 0.859, 0.859, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 335, 5);
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.961, 0.961, 0.961, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 340, 4);
        //pillar 2
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.478, 0.478, 0.478, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 344, 4);
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.569, 0.569, 0.569, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 348, 4);
        
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.82, 0.82, 0.82, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 352, 4);
        glDrawArrays(GL_TRIANGLE_FAN, 356, 4);
        glDrawArrays(GL_TRIANGLE_FAN, 360, 4);
        glDrawArrays(GL_TRIANGLE_FAN, 364, 4);
        glDrawArrays(GL_TRIANGLE_FAN, 368, 4);

        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.902, 0.902, 0.902, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 372, 4);

        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.902, 0.902, 0.902, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 376, 4);
        //garage top part
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.569, 0.569, 0.569, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 380, 4);
        
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.961, 0.961, 0.961, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 384, 4);
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.859, 0.859, 0.859, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 388, 4);
        //garage side part
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.902, 0.902, 0.902, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 392, 4);
        //door top and bottom part
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.961, 0.961, 0.961, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 396, 4);
        glDrawArrays(GL_TRIANGLE_FAN, 427, 4);

        //door
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.278, 0.278, 0.278, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 400, 4);
        glDrawArrays(GL_TRIANGLE_FAN, 404, 4);

        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.902, 0.902, 0.902, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 408, 4);
        //door handle
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.278, 0.278, 0.278, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 412, 4);
        glDrawArrays(GL_TRIANGLE_FAN, 416, 4);
        //infront of door
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.651, 0.549, 0.443, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 420, 7);
        //stair
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.82, 0.686, 0.545, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 431, 4);
        glDrawArrays(GL_TRIANGLE_FAN, 447, 4);
        glDrawArrays(GL_TRIANGLE_FAN, 439, 4);
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.651, 0.549, 0.443, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 435, 4);
        glDrawArrays(GL_TRIANGLE_FAN, 443, 4);
        //stair side
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.82, 0.686, 0.545, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 451, 4);
        //balcony
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.961, 0.961, 0.961, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 455, 5);

        //window 2
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.278, 0.278, 0.278, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 472, 4);
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.98, 0.95, 0.93, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 476, 4);
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.0, 0.0, 0.0, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 480, 4);
        glDrawArrays(GL_TRIANGLE_FAN, 484, 4);
        //door 2
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.278, 0.278, 0.278, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 488, 7);
        glDrawArrays(GL_TRIANGLE_FAN, 499, 4);

        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.902, 0.902, 0.902, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 495, 4);
        //window place 1
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.478, 0.478, 0.478, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 503, 4);
        glDrawArrays(GL_TRIANGLE_FAN, 507, 4);
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.278, 0.278, 0.278, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 511, 4);
        glDrawArrays(GL_TRIANGLE_FAN, 515, 4);
        //window 1
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.98, 0.95, 0.93, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 460, 4);
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.0, 0.0, 0.0, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 464, 4);
        glDrawArrays(GL_TRIANGLE_FAN, 468, 4);
        //3rd section
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.82, 0.82, 0.82, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 519, 4);
        glDrawArrays(GL_TRIANGLE_FAN, 550, 4);
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.749, 0.749, 0.749, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 523, 4);
        glDrawArrays(GL_TRIANGLE_FAN, 527, 10);
        //window place 2
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.478, 0.478, 0.478, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 554, 4);
        glDrawArrays(GL_TRIANGLE_FAN, 558, 4);
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.278, 0.278, 0.278, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 562, 4);
        glDrawArrays(GL_TRIANGLE_FAN, 566, 4);
        //window 2
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.98, 0.95, 0.93, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 570, 4);
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.0, 0.0, 0.0, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 574, 4);
        glDrawArrays(GL_TRIANGLE_FAN, 578, 4);
        //small window 1
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.98, 0.95, 0.93, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 582, 4);
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.0, 0.0, 0.0, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 586, 4);
        //small window 2
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.98, 0.95, 0.93, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 590, 4);
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.0, 0.0, 0.0, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 594, 4);
        //stair side
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.561, 0.471, 0.376, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 598, 8);
        //garage door
        glUniform4fv(colorPlace, 1, glm::value_ptr(glm::vec4(0.478, 0.478, 0.478, 1.0)));
        glDrawArrays(GL_TRIANGLE_FAN, 611, 4);
        //glDrawArrays(GL_LINE_LOOP, 0, 301);
        //glDrawArrays(GL_TRIANGLES, 0, 6);
        //glDrawArrays(GL_TRIANGLE_STRIP, 0, 6);
        //glDrawArrays(GL_TRIANGLE_FAN, 0, 6);
        //glDrawArrays(GL_TRIANGLES, 0, 3);
        // glBindVertexArray(0); // no need to unbind it every time

        // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
        // -------------------------------------------------------------------------------
        // Display active transformation mode
        //if (activeMode == ROTATE)
        //    cout << "Rotation mode active. Use UP/DOWN to rotate." << endl;
        //else if (activeMode == TRANSLATE)
        //    cout << "Translation mode active. Use ARROWS to translate." << endl;
        //else if (activeMode == SCALE)
        //    cout << "Scaling mode active. Use UP/DOWN to scale." << endl;

        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    // optional: de-allocate all resources once they've outlived their purpose:
    // ------------------------------------------------------------------------
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
    glDeleteProgram(shaderProgram);

    // glfw: terminate, clearing all previously allocated GLFW resources.
    // ------------------------------------------------------------------
    glfwTerminate();
    return 0;
}

// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly
// ---------------------------------------------------------------------------------------------------------
void processInput(GLFWwindow* window)
{
    double currentTime = glfwGetTime();
    if (currentTime - lastKeyPressTime < keyPressDelay) return;

    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);
    // Activate Rotation mode
    if (glfwGetKey(window, GLFW_KEY_R) == GLFW_PRESS) {
        activeMode = ROTATE;
        lastKeyPressTime = currentTime;
    }

    // Activate Translation mode
    if (glfwGetKey(window, GLFW_KEY_T) == GLFW_PRESS) {
        activeMode = TRANSLATE;
        lastKeyPressTime = currentTime;
    }
        
    // Activate Scaling mode
    if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS) {
        activeMode = SCALE;
        lastKeyPressTime = currentTime;
    }
        
    // Transformation operations based on active mode
    if (activeMode == ROTATE)
    {
        if (glfwGetKey(window, GLFW_KEY_UP) == GLFW_PRESS) {
            rotateAngle += 30.0f;
            lastKeyPressTime = currentTime;
        }   
        if (glfwGetKey(window, GLFW_KEY_DOWN) == GLFW_PRESS) {
                rotateAngle -= 30.0f;
                lastKeyPressTime = currentTime;
        }
    }
    else if (activeMode == TRANSLATE)
    {
        if (glfwGetKey(window, GLFW_KEY_UP) == GLFW_PRESS) {
            translate_Y += 0.1f;
            lastKeyPressTime = currentTime;
        }
        if (glfwGetKey(window, GLFW_KEY_DOWN) == GLFW_PRESS) {
            translate_Y -= 0.1f;
            lastKeyPressTime = currentTime;
        }
        if (glfwGetKey(window, GLFW_KEY_RIGHT) == GLFW_PRESS) {
            translate_X += 0.1f;
            lastKeyPressTime = currentTime;
        }
        if (glfwGetKey(window, GLFW_KEY_LEFT) == GLFW_PRESS) {
            translate_X -= 0.1f;
            lastKeyPressTime = currentTime;
        }
    }
    else if (activeMode == SCALE)
    {
        if (glfwGetKey(window, GLFW_KEY_UP) == GLFW_PRESS)
        {
            scale_X += 0.1f;
            scale_Y += 0.1f;
            lastKeyPressTime = currentTime;
        }
        if (glfwGetKey(window, GLFW_KEY_DOWN) == GLFW_PRESS)
        {
            scale_X -= 0.1f;
            scale_Y -= 0.1f;
            lastKeyPressTime = currentTime;
        }
    }

}

// glfw: whenever the window size changed (by OS or user resize) this callback function executes
// ---------------------------------------------------------------------------------------------
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
    // make sure the viewport matches the new window dimensions; note that width and
    // height will be significantly larger than specified on retina displays.
    glViewport(0, 0, width, height);
}
